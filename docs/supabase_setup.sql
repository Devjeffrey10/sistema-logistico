-- =====================================================
-- CONFIGURA√á√ÉO COMPLETA DO SUPABASE
-- TransporteManager - Sistema de Gest√£o de Transportadora
-- =====================================================

-- Limpar tabelas existentes (se necess√°rio)
DROP TABLE IF EXISTS public.usuarios CASCADE;

-- =====================================================
-- TABELA DE USU√ÅRIOS
-- =====================================================

CREATE TABLE IF NOT EXISTS public.usuarios (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  nome VARCHAR(255) NOT NULL,
  fun√ß√£o VARCHAR(50) NOT NULL CHECK (fun√ß√£o IN ('admin', 'operator', 'viewer')),
  telefone VARCHAR(20),
  status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive')),
  auth_user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  last_login TIMESTAMP WITH TIME ZONE,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- =====================================================
-- √çNDICES PARA PERFORMANCE
-- =====================================================

CREATE INDEX IF NOT EXISTS idx_usuarios_email ON public.usuarios(email);
CREATE INDEX IF NOT EXISTS idx_usuarios_auth_user_id ON public.usuarios(auth_user_id);
CREATE INDEX IF NOT EXISTS idx_usuarios_status ON public.usuarios(status);
CREATE INDEX IF NOT EXISTS idx_usuarios_fun√ß√£o ON public.usuarios(fun√ß√£o);

-- =====================================================
-- ROW LEVEL SECURITY (RLS)
-- =====================================================

-- Habilitar RLS na tabela
ALTER TABLE public.usuarios ENABLE ROW LEVEL SECURITY;

-- Limpar pol√≠ticas existentes
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.usuarios;
DROP POLICY IF EXISTS "Enable insert for service role" ON public.usuarios;
DROP POLICY IF EXISTS "Enable update for own profile" ON public.usuarios;
DROP POLICY IF EXISTS "Enable update for admin users" ON public.usuarios;
DROP POLICY IF EXISTS "Enable delete for admin users" ON public.usuarios;

-- Pol√≠tica para leitura - usu√°rios autenticados podem ver todos os usu√°rios
CREATE POLICY "Enable read access for authenticated users" ON public.usuarios
FOR SELECT USING (
  auth.role() = 'authenticated' OR 
  auth.role() = 'service_role'
);

-- Pol√≠tica para inser√ß√£o - apenas service_role pode criar usu√°rios
CREATE POLICY "Enable insert for service role" ON public.usuarios
FOR INSERT WITH CHECK (
  auth.role() = 'service_role' OR
  (auth.role() = 'authenticated' AND auth.uid() IS NOT NULL)
);

-- Pol√≠tica para atualiza√ß√£o - usu√°rios podem atualizar pr√≥prio perfil
CREATE POLICY "Enable update for own profile" ON public.usuarios
FOR UPDATE USING (
  auth.uid() = auth_user_id OR
  auth.role() = 'service_role'
) WITH CHECK (
  auth.uid() = auth_user_id OR
  auth.role() = 'service_role'
);

-- Pol√≠tica para exclus√£o - apenas service_role pode deletar
CREATE POLICY "Enable delete for admin users" ON public.usuarios
FOR DELETE USING (
  auth.role() = 'service_role'
);

-- =====================================================
-- TRIGGERS E FUN√á√ïES
-- =====================================================

-- Fun√ß√£o para atualizar updated_at automaticamente
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger para atualizar updated_at
DROP TRIGGER IF EXISTS update_usuarios_updated_at ON public.usuarios;
CREATE TRIGGER update_usuarios_updated_at
    BEFORE UPDATE ON public.usuarios
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Fun√ß√£o para criar perfil de usu√°rio automaticamente ap√≥s registro
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.usuarios (
    auth_user_id, 
    email, 
    nome, 
    fun√ß√£o,
    status
  )
  VALUES (
    NEW.id,
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'name', split_part(NEW.email, '@', 1)),
    COALESCE(NEW.raw_user_meta_data->>'role', 'operator'),
    'active'
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger para criar perfil automaticamente
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- =====================================================
-- DADOS INICIAIS
-- =====================================================

-- Inserir usu√°rio admin padr√£o (ser√° criado via Auth se n√£o existir)
-- O perfil ser√° criado automaticamente pelo trigger acima

-- =====================================================
-- FUN√á√ïES AUXILIARES
-- =====================================================

-- Fun√ß√£o para buscar usu√°rio por email
CREATE OR REPLACE FUNCTION get_user_by_email(user_email text)
RETURNS TABLE(
  id UUID,
  email VARCHAR,
  nome VARCHAR,
  fun√ß√£o VARCHAR,
  telefone VARCHAR,
  status VARCHAR,
  created_at TIMESTAMPTZ,
  last_login TIMESTAMPTZ
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    u.id,
    u.email,
    u.nome,
    u.fun√ß√£o,
    u.telefone,
    u.status,
    u.created_at,
    u.last_login
  FROM public.usuarios u
  WHERE u.email = user_email AND u.status = 'active';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Fun√ß√£o para atualizar √∫ltimo login
CREATE OR REPLACE FUNCTION update_last_login(user_id UUID)
RETURNS VOID AS $$
BEGIN
  UPDATE public.usuarios 
  SET last_login = timezone('utc'::text, now())
  WHERE id = user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- VIEWS √öTEIS
-- =====================================================

-- View para estat√≠sticas de usu√°rios
CREATE OR REPLACE VIEW user_stats AS
SELECT 
  fun√ß√£o,
  status,
  COUNT(*) as total,
  COUNT(CASE WHEN last_login > now() - interval '30 days' THEN 1 END) as active_last_30_days
FROM public.usuarios
GROUP BY fun√ß√£o, status;

-- =====================================================
-- COMENT√ÅRIOS NA TABELA
-- =====================================================

COMMENT ON TABLE public.usuarios IS 'Tabela de usu√°rios do sistema TransporteManager';
COMMENT ON COLUMN public.usuarios.id IS 'Identificador √∫nico do usu√°rio';
COMMENT ON COLUMN public.usuarios.email IS 'Email do usu√°rio (√∫nico)';
COMMENT ON COLUMN public.usuarios.nome IS 'Nome completo do usu√°rio';
COMMENT ON COLUMN public.usuarios.fun√ß√£o IS 'Fun√ß√£o do usu√°rio: admin, operator, viewer';
COMMENT ON COLUMN public.usuarios.telefone IS 'Telefone de contato (opcional)';
COMMENT ON COLUMN public.usuarios.status IS 'Status: active, inactive';
COMMENT ON COLUMN public.usuarios.auth_user_id IS 'Refer√™ncia ao usu√°rio na tabela auth.users';
COMMENT ON COLUMN public.usuarios.created_at IS 'Data de cria√ß√£o do registro';
COMMENT ON COLUMN public.usuarios.last_login IS 'Data do √∫ltimo login';
COMMENT ON COLUMN public.usuarios.updated_at IS 'Data da √∫ltima atualiza√ß√£o';

-- =====================================================
-- CONFIGURA√á√ïES DE SEGURAN√áA ADICIONAIS
-- =====================================================

-- Remover acesso p√∫blico direto √†s fun√ß√µes
REVOKE ALL ON FUNCTION update_last_login(UUID) FROM PUBLIC;
REVOKE ALL ON FUNCTION get_user_by_email(text) FROM PUBLIC;

-- Conceder acesso apenas para authenticated e service_role
GRANT EXECUTE ON FUNCTION update_last_login(UUID) TO authenticated, service_role;
GRANT EXECUTE ON FUNCTION get_user_by_email(text) TO authenticated, service_role;

-- =====================================================
-- VERIFICA√á√ïES FINAIS
-- =====================================================

-- Verificar se RLS est√° habilitado
SELECT 
  schemaname, 
  tablename, 
  rowsecurity 
FROM pg_tables 
WHERE tablename = 'usuarios';

-- Verificar pol√≠ticas criadas
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual
FROM pg_policies 
WHERE tablename = 'usuarios';

-- =====================================================
-- MENSAGEM DE SUCESSO
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '‚úÖ Configura√ß√£o do Supabase conclu√≠da com sucesso!';
  RAISE NOTICE 'üîê RLS habilitado e pol√≠ticas de seguran√ßa configuradas';
  RAISE NOTICE 'üöÄ Sistema pronto para uso com autentica√ß√£o Supabase';
  RAISE NOTICE 'üìß Configurar autentica√ß√£o por email nas configura√ß√µes do projeto';
END $$;
